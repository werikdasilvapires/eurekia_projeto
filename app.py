import streamlit as st
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score
from sklearn.preprocessing import StandardScaler
from sklearn.pipeline import Pipeline

# Configura√ß√£o do tema do Streamlit
st.set_page_config(page_title="An√°lise de Satisfa√ß√£o do Cliente", layout="wide", initial_sidebar_state="expanded")

# T√≠tulo e descri√ß√£o da aplica√ß√£o
st.title("üîç An√°lise de Satisfa√ß√£o do Cliente")
st.markdown("Esta aplica√ß√£o analisa a satisfa√ß√£o dos clientes de um restaurante, utilizando dados de um arquivo CSV. Voc√™ pode carregar seus dados, treinar um modelo de aprendizado de m√°quina e gerar insights valiosos para o seu neg√≥cio.")

# Carregar o arquivo CSV
uploaded_file = st.file_uploader("üìÅ Envie o arquivo CSV", type=["csv"])

if uploaded_file is not None:
    dados = pd.read_csv(uploaded_file)

    # Exibir amostra do dataset
    st.subheader("üìù Amostra dos Dados")
    st.write(dados.head())

    # Verificar e preencher valores nulos, se houver
    if dados.isnull().sum().any():
        dados = dados.fillna(0)  # Preencher nulos com 0 (ou ajuste conforme necess√°rio)
        st.write("üî¥ Valores nulos detectados e preenchidos com 0.")

    # Gr√°ficos iniciais
    st.subheader("üìä Visualiza√ß√£o Inicial dos Dados")

    col1, col2, col3 = st.columns(3)

    with col1:
        # Distribui√ß√£o por g√™nero
        st.markdown("### Distribui√ß√£o por G√™nero")
        fig, ax = plt.subplots()
        sns.countplot(x='Gender', data=dados, ax=ax)
        st.pyplot(fig)

    with col2:
        # Distribui√ß√£o de idade
        st.markdown("### Distribui√ß√£o de Idade")
        fig, ax = plt.subplots()
        sns.histplot(dados['Age'], kde=True, bins=20, ax=ax)
        st.pyplot(fig)

    with col3:
        # Gasto m√©dio por visita
        st.markdown("### Renda vs Gasto M√©dio")
        fig, ax = plt.subplots()
        sns.scatterplot(x='Income', y='AverageSpend', data=dados, ax=ax)
        st.pyplot(fig)

    st.subheader("üìà An√°lise de Satisfa√ß√£o")
    
    col1, col2 = st.columns(2)

    with col1:
        # An√°lise de Satisfa√ß√£o com rela√ß√£o ao Tempo de Espera
        st.markdown("### Tempo de Espera vs Satisfa√ß√£o")
        fig, ax = plt.subplots()
        sns.boxplot(x='HighSatisfaction', y='WaitTime', data=dados, ax=ax)
        st.pyplot(fig)

    with col2:
        # An√°lise de Satisfa√ß√£o com rela√ß√£o √† Qualidade do Servi√ßo
        st.markdown("### Qualidade do Servi√ßo vs Satisfa√ß√£o")
        fig, ax = plt.subplots()
        sns.boxplot(x='HighSatisfaction', y='ServiceRating', data=dados, ax=ax)
        st.pyplot(fig)

    st.subheader("üìä Fatores Impactantes na Satisfa√ß√£o")

    # Gr√°ficos adicionais
    col1, col2, col3 = st.columns(3)

    with col1:
        # Satisfa√ß√£o por G√™nero
        st.markdown("### Satisfa√ß√£o por G√™nero")
        fig, ax = plt.subplots()
        sns.countplot(x='HighSatisfaction', hue='Gender', data=dados, ax=ax)
        ax.legend(title='G√™nero')
        st.pyplot(fig)

    with col2:
        # Satisfa√ß√£o por Culin√°ria Preferida
        st.markdown("### Satisfa√ß√£o por Culin√°ria Preferida")
        fig, ax = plt.subplots()
        sns.countplot(y='PreferredCuisine', hue='HighSatisfaction', data=dados, ax=ax)
        ax.legend(title='Satisfa√ß√£o')
        st.pyplot(fig)

    with col3:
        # Satisfa√ß√£o por Tipo de Refei√ß√£o
        st.markdown("### Satisfa√ß√£o por Tipo de Refei√ß√£o")
        fig, ax = plt.subplots()
        sns.countplot(x='MealType', hue='HighSatisfaction', data=dados, ax=ax)
        ax.legend(title='Satisfa√ß√£o')
        st.pyplot(fig)

    if st.button("üöÄ Treinar Modelos de Machine Learning e Gerar Insights"):
        # Remover espa√ßos nos nomes das colunas
        dados.columns = dados.columns.str.strip()

        # Preparar os dados para machine learning
        X = dados.drop('HighSatisfaction', axis=1)
        y = dados['HighSatisfaction']
        X = pd.get_dummies(X, drop_first=True)  # One-Hot Encoding

        # Normaliza√ß√£o dos dados
        scaler = StandardScaler()
        X_scaled = scaler.fit_transform(X)

        # Dividir entre treino e teste
        X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

        # Modelos a serem testados
        modelos = {
            'Random Forest': RandomForestClassifier(),
            'Logistic Regression': LogisticRegression(max_iter=200),
            'Support Vector Machine': SVC(),
            'Gradient Boosting': GradientBoostingClassifier()
        }

        resultados = {}

        # Treinamento e avalia√ß√£o de modelos
        for nome, modelo in modelos.items():
            pipeline = Pipeline([('classifier', modelo)])
            param_grid = {}
            
            # Definindo par√¢metros para cada modelo
            if nome == 'Random Forest':
                param_grid = {'classifier__n_estimators': [50, 100]}
            elif nome == 'Logistic Regression':
                param_grid = {'classifier__C': [0.1, 1, 10]}
            elif nome == 'Support Vector Machine':
                param_grid = {'classifier__kernel': ['linear', 'rbf'], 'classifier__C': [0.1, 1, 10]}
            elif nome == 'Gradient Boosting':
                param_grid = {'classifier__learning_rate': [0.01, 0.1, 1], 'classifier__n_estimators': [50, 100]}

            grid_search = GridSearchCV(pipeline, param_grid, cv=5, scoring='accuracy', n_jobs=-1)
            grid_search.fit(X_train, y_train)

            # Previs√µes e m√©tricas
            y_pred = grid_search.predict(X_test)
            resultados[nome] = {
                'accuracy': accuracy_score(y_test, y_pred),
                'report': classification_report(y_test, y_pred, output_dict=True)
            }

        # Apresentar resultados
        st.subheader("üìä Compara√ß√£o de Modelos")
        for nome, resultado in resultados.items():
            st.markdown(f"### {nome}")
            st.write(f"**Acur√°cia:** {resultado['accuracy']:.2f}")
            st.write("**Relat√≥rio de Classifica√ß√£o:**")
            st.text(classification_report(y_test, y_pred, target_names=["Baixa", "Alta"]))
        
        # Matriz de confus√£o para o melhor modelo
        melhor_modelo = max(resultados.items(), key=lambda x: x[1]['accuracy'])[0]
        y_pred_melhor = grid_search.predict(X_test)  # Corrigido para pegar as previs√µes do melhor modelo

        st.subheader("üîç Matriz de Confus√£o")
        fig, ax = plt.subplots()
        sns.heatmap(confusion_matrix(y_test, y_pred_melhor), annot=True, cmap='Blues', ax=ax)
        ax.set_title("Matriz de Confus√£o do Melhor Modelo")
        st.pyplot(fig)

        # Import√¢ncia das vari√°veis para o Random Forest
        if 'Random Forest' in resultados:
            modelo_rf = modelos['Random Forest']
            modelo_rf.fit(X_train, y_train)
            importancias = modelo_rf.feature_importances_
            indices = pd.Series(importancias, index=X.columns).sort_values(ascending=False)

            st.subheader("üåü Import√¢ncia das Vari√°veis")
            fig, ax = plt.subplots()
            sns.barplot(x=indices, y=indices.index, palette='viridis', ax=ax)
            ax.set_title("Fatores que mais Impactam a Satisfa√ß√£o")
            st.pyplot(fig)

            # Gera√ß√£o de Insights
            st.subheader("üí° Insights para Melhorar a Satisfa√ß√£o dos Clientes")
            st.write("1. **Treinamento de Equipe:** Aumentar a frequ√™ncia de treinamentos pode melhorar a qualidade do atendimento.")
            st.write("2. **Monitorar o Tempo de Espera:** Implementar um sistema para otimizar o tempo de espera dos clientes.")
            st.write("3. **Personaliza√ß√£o de Ofertas:** Utilizar dados de visitas e prefer√™ncias para criar promo√ß√µes personalizadas.")
            st.write("4. **Melhorar a Qualidade da Comida:** Investir na qualidade dos pratos oferecidos com base nas prefer√™ncias dos clientes.")
            st.write("5. **Feedback Cont√≠nuo:** Criar um sistema para coletar feedback ap√≥s cada visita para ajustes cont√≠nuos.")
